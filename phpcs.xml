<?xml version="1.0"?>
<ruleset name="PHPStan">
	<description>The PHPStan coding standard.</description>
	<arg name="tab-width" value="4"/>
	<arg name="encoding" value="UTF-8" />

	<!-- 1. External -->

	<rule ref="vendor/consistence/coding-standard/Consistence/ruleset.xml">
		<exclude name="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration.InvalidFormat"/>
		<exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameAfterKeyword"/>
		<exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
		<exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/>
		<exclude name="Consistence.Exceptions.ExceptionDeclaration"/>
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
		<exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
		<properties>
			<property name="caseSensitive" value="false"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<properties>
			<property name="newlinesCountBetweenOpenTagAndDeclare" value="0"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
		<properties>
			<property name="usefulAnnotations" type="array" value="
				@dataProvider,
				@requires
			"/>
		</properties>
		<exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification"/>
		<exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification"/>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
	<rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>
	<rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator"/>
	<rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
		<properties>
			<property name="rootNamespaces" type="array" value="src=>PHPStan,tests/PHPStan=>PHPStan"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
	<rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
	<rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
	<rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
	<rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
	<rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing"/>
	<rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
	<rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
	<!--<rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>-->
	<rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
	<rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
	<rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>

	<!-- 2. General -->

	<!-- 2.1 Basic Coding Standard -->

	<!-- Forbid some functions -->
	<rule ref="Generic.PHP.ForbiddenFunctions">
		<properties>
			<!-- http://php.net/manual/en/aliases.php -->
			<property
				name="forbiddenFunctions"
				type="array"
				value="
                    var_dump => null,
                    d => null,
                    dd => null,
                    ddd => null,
                    die => exit,
                    chop => rtrim,
                    close => closedir,
                    compact => null,
                    delete => unset,
                    doubleval => floatval,
                    extract => null,
                    fputs => fwrite,
                    ini_alter => ini_set,
                    is_double => is_float,
                    is_integer => is_int,
                    is_long => is_int,
                    is_null => null,
                    is_real => is_float,
                    is_writeable => is_writable,
                    join => implode,
                    key_exists => array_key_exists,
                    pos => current,
                    print=>echo,
                    settype => null,
                    show_source => highlight_file,
                    sizeof => count,
                    strchr => strstr
                "/>
		</properties>
	</rule>

	<!-- Check to ensure no PHP deprecated functions have been used -->
	<rule ref="Generic.PHP.DeprecatedFunctions"/>

	<!-- Show warnings on Discouraged Functions: error_log, print_r and var_dump -->
	<rule ref="Squiz.PHP.DiscouragedFunctions"/>

	<!-- Eval is Evil -->
	<rule ref="Squiz.PHP.Eval"/>

	<!-- Dont use $GLOBALS -->
	<rule ref="Squiz.PHP.GlobalKeyword"/>

	<!-- Forbid `AND` and `OR`, require `&&` and `||` -->
	<!--
        $true = true;
        $false = false;

        $what = $true and $false;
        var_dump($what); // true

        $what = $true && $false;
        var_dump($what); // false
    -->
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>

	<!-- Forbid functions inside functions -->
	<rule ref="Squiz.PHP.InnerFunctions"/>

	<!-- Require PHP function calls in lowercase -->
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>

	<!-- Checks for Code that will never be Executed by bad Design -->
	<rule ref="Squiz.PHP.NonExecutableCode"/>

	<!-- Forbid `$this` inside static function -->
	<rule ref="Squiz.Scope.StaticThisUsage"/>

	<!-- A class or interface must not be defined in multiple files. -->
	<rule ref="Generic.Classes.DuplicateClassName"/>

	<!-- Forbid PHP 4 constructors -->
	<rule ref="Generic.NamingConventions.ConstructorName"/>

	<!-- Class constants MUST be declared in all upper case with underscore separators. -->
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<!-- Do not use e.g. "if (true)" -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

	<!-- Do not use <? -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>

	<!-- In PHP files make sure there is no character before the opening tag -->
	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

	<!-- Forbid comments starting with # -->
	<rule ref="PEAR.Commenting.InlineComment"/>

	<!-- Default Class declaration -->
	<rule ref="Squiz.Classes.ClassDeclaration"/>

	<!-- Complexity -->
	<!-- TODO: decrease values (15.10.2018 | 200, 999) -->
	<rule ref="Generic.Metrics.CyclomaticComplexity">
		<properties>
			<property name="complexity" value="200"/>
			<property name="absoluteComplexity" value="999"/>
		</properties>
	</rule>

	<!-- Nesting -->
	<!-- TODO: decrease values (15.10.2018 | 10, 999) -->
	<rule ref="Generic.Metrics.NestingLevel">
		<properties>
			<property name="nestingLevel" value="10"/>
			<property name="absoluteNestingLevel" value="999"/>
		</properties>
	</rule>

	<!-- 2.2 Files -->

	<!-- One file one class -->
	<rule ref="Generic.Files.OneClassPerFile"/>

	<!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<!-- All PHP files MUST end with a single blank line. -->
	<!-- checked in Files/EndFileNewlineSniff -->

	<!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
	<!-- checked in Files/ClosingTagSniff -->

	<!-- 2.3 Lines -->

	<!-- The soft limit on line length MUST be "x"-characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="250"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>

	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines"/>

	<!-- Force whitespace before and after concatenation -->
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>

	<!-- Require space around logical operators -->
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

	<!-- There MUST NOT be more than one statement per line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>

	<!-- 2.4 Indenting -->

	<!-- Code MUST use tabs for indenting. -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="tabIndent" value="true" />
			<property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
		</properties>
	</rule>

	<!-- 2.5 Keywords and True/False/Null -->

	<!-- PHP keywords MUST be in lower case. -->
	<rule ref="Generic.PHP.LowerCaseKeyword"/>

	<!-- The PHP constants true, false, and null MUST be in lower case. -->
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<!-- 2.6 Comments -->

	<!-- To do comments should be reported and completed -->
	<rule ref="Generic.Commenting.Todo.CommentFound">
		<message>Please review this TODO comment: %s</message>
		<severity>3</severity>
		<type>warning</type>
	</rule>

	<!-- Fix me comments should be reported and fixed -->
	<rule ref="Generic.Commenting.Todo.Fixme">
		<message>Please review this FIXME comment: %s</message>
		<severity>5</severity>
		<type>warning</type>
	</rule>

	<!-- 3. Namespace and Use Declarations -->

	<!-- When present, there MUST be one blank line after the namespace declaration. -->
	<!-- checked in Namespaces/NamespaceDeclarationSniff -->

	<!-- When present, all use declarations MUST go after the namespace declaration.
         There MUST be one use keyword per declaration.
         There MUST be one blank line after the use block. -->
	<!-- checked in Namespaces/UseDeclarationSniff -->

	<!-- 4. Classes, Properties, and Methods -->

	<!-- 4.1. Extends and Implements -->

	<!-- The extends and implements keywords MUST be declared on the same line as the class name.
         The opening brace for the class go MUST go on its own line; the closing brace for the class MUST go on the next line after the body.
         Lists of implements MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one interface per line. -->
	<!-- checked in Classes/ClassDeclarationSniff -->

	<!-- 4.2. Properties -->

	<!-- Visibility MUST be declared on all properties.
         The var keyword MUST NOT be used to declare a property.
         There MUST NOT be more than one property declared per statement.
         Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
	<!-- checked in Classes/PropertyDeclarationSniff -->

	<!-- 4.3 Methods -->

	<!-- Visibility MUST be declared on all methods. -->
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

	<!-- Spaces for equal symbols -->
	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>

	<!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
	<!-- checked in Methods/MethodDeclarationSniff -->

	<!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

	<!-- 4.4 Method Arguments -->

	<!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint"/>

	<!-- Method arguments with default values MUST go at the end of the argument list. -->
	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

	<!-- 4.5 abstract, final, and static -->

	<!-- When present, the abstract and final declarations MUST precede the visibility declaration.
         When present, the static declaration MUST come after the visibility declaration. -->
	<!-- checked in Methods/MethodDeclarationSniff -->

	<!-- 4.6 Method and Function Calls -->

	<!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
    Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

	<!-- 5. Control Structures -->

	<!-- The general style rules for control structures are as follows:
    There MUST be one space after the control structure keyword
    There MUST NOT be a space after the opening parenthesis
    There MUST NOT be a space before the closing parenthesis
    There MUST be one space between the closing parenthesis and the opening brace
    The structure body MUST be indented once
    The closing brace MUST be on the next line after the body -->
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<!-- checked in ControlStructures/ControlStructureSpacingSniff -->

	<!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<!-- 5.1. if, elseif, else -->

	<!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
	<!-- checked in ControlStructures/ElseIfDeclarationSniff -->

	<!-- 5.2. switch, case -->

	<!-- The case statement MUST be indented once from switch, and the break keyword (or other terminating keyword) MUST be indented at the same level as the case body. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body. -->
	<!-- checked in ControlStructures/SwitchDeclarationSniff -->

	<!-- 6. Closures -->

	<!-- Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword.
    The opening brace MUST go on the same line, and the closing brace MUST go on the next line following the body.
    There MUST NOT be a space after the opening parenthesis of the argument list or variable list, and there MUST NOT be a space before the closing parenthesis of the argument list or variable list.
    In the argument list and variable list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
    Closure arguments with default values MUST go at the end of the argument list.
    Argument lists and variable lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument or variable per line.
    When the ending list (whether or arguments or variables) is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
	<!-- checked in Squiz.Functions.MultiLineFunctionDeclaration -->

	<!-- 7. Ignore -->

	<!-- phpstan: Ignore some rules -->
	<!--
	<rule ref="PEAR.Functions.FunctionCallSignature.MultipleArguments">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Classes.ValidClassName.NotCamelCaps">
		<severity>0</severity>
	</rule>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma">
      <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
      <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
      <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.MultipleArguments">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.MissingParamComment">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.ClassComment.SpacingBefore">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Classes.ValidClassName.NotCamelCaps">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.VariableComment.MissingShort">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.VariableComment.SpacingBeforeTags">
      <severity>0</severity>
    </rule>
    -->

	<!-- phpstan: Ignore some files -->
	<exclude-pattern>tests/*/data</exclude-pattern>
	<exclude-pattern>tests/*/traits</exclude-pattern>
	<exclude-pattern>tests/notAutoloaded</exclude-pattern>
	<exclude-pattern>src/Reflection/SignatureMap/functionMap.php</exclude-pattern>
</ruleset>
